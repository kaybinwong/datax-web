# Default values for datax-web.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.cn-shenzhen.aliyuncs.com/kayb/datax-web
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## @section datax-web database parameters
admin: 
  ## @param admin.extraEnvVars Array with extra environment variables to add Dataxweb admin pods
  ##
  extraEnvVars: 
    DB_HOST: 127.0.0.1
    DB_PORT: 3306
    DB_USERNAME: root
    DB_PASSWORD: 1qaz!QAZ
    DB_DATABASE: dataxweb
    MAIL_USERNAME: ""
    MAIL_PASSWORD: ""
  extraEnvVarsSecret: ""
  ## @param admin.containerPorts.http Dataxweb worker HTTP container port
  ##
  containerPorts:
    http: 9527
  ## @param admin.replicaCount Number of Dataxweb worker replicas
  ##
  replicaCount: 1
  ## Configure extra options for Dataxweb worker containers' liveness, readiness and startup probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  ## @param admin.livenessProbe.enabled Enable livenessProbe on Dataxweb worker containers
  ## @param admin.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param admin.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param admin.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param admin.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param admin.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    httpGet:
        path: /actuator/info
        port: 9527
    initialDelaySeconds: 180
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  ## @param admin.readinessProbe.enabled Enable readinessProbe on Dataxweb worker containers
  ## @param admin.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param admin.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param admin.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param admin.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param admin.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    httpGet:
        path: /actuator/info
        port: 9527
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  service:
    type: ClusterIP
    port: 9527

excutor:
  args: []
  ## @param excutor.extraEnvVars Map with extra environment variables to add Dataxweb excutor pods
  ##
  extraEnvVars: {}
  extraEnvVarsSecret: ""
  ## @param excutor.containerPorts.http Dataxweb worker HTTP container port
  ##
  containerPorts:
    http: 9004
  ## @param excutor.replicaCount Number of Dataxweb worker replicas
  ##
  replicaCount: 1
  ## Configure extra options for Dataxweb worker containers' liveness, readiness and startup probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  ## @param excutor.livenessProbe.enabled Enable livenessProbe on Dataxweb worker containers
  ## @param excutor.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param excutor.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param excutor.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param excutor.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param excutor.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: false
    httpGet:
        path: /actuator/info
        port: 9004
    initialDelaySeconds: 180
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  ## @param excutor.readinessProbe.enabled Enable readinessProbe on Dataxweb worker containers
  ## @param excutor.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param excutor.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param excutor.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param excutor.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param excutor.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: false
    httpGet:
        path: /actuator/info
        port: 9527
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
